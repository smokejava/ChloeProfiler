<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" width="100%" height="100%" xmlns:uicomponents="com.chloe.mvcs.view.profileEditor.pictureEditor.uicomponents.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import caurina.transitions.Tweener;
			import com.chloe.mvcs.model.picture.PictureModel;
			
			import mx.events.EffectEvent;
			import mx.utils.StringUtil;
			
			import spark.core.SpriteVisualElement;

			[Bindable][Embed(source="embedded_assets/photorollButton.png")]
			private var photoRoll:Class;
			
			[Bindable][Embed(source="embedded_assets/takePhotoButton.png")]
			private var takePhoto:Class;
			
			[Bindable][Embed(source="embedded_assets/scalingInstructions.png")]
			private var scalingInstrucitonsBitmap:Class;
			
			[Bindable][Embed(source="embedded_assets/saveButton.png")]
			private var saveButtonBitmap:Class;
			
			[Bindable]
			private var _pictureData:PictureModel
			
			[Bindable]
			private var picturePath:String;
			
			[Bindable]
			private var pictureBitmap:BitmapData;
			
			private var pictureMask:SpriteVisualElement = new SpriteVisualElement();
			
			private var originalScaleX:Number = 1;
			
			public function get pictureData():PictureModel
			{
				return _pictureData;
			}

			public function set pictureData(value:PictureModel):void
			{
				_pictureData = value;
				
				new StringUtil
				if(StringUtil.trim(pictureData.rawPath).length==0) {
					
					if(pictureData.rawBitmap==null) {
						this.currentState == "newPictureClosed";
						
						pictureMask.graphics.beginFill(0xFF0000);
						pictureMask.graphics.drawRect(0, 0, 768, 1024);
						pictureMask.graphics.endFill();
						this.addElement(pictureMask);
						this.imageContainer.mask = pictureMask;
					} else {
						this.currentState == "editPictureClosed";
						this.pictureBitmap = pictureData.rawBitmap.bitmapData;
					}
				} else {
					this.currentState = "editPictureClosed";
					picturePath = _pictureData.rawPath;
				}
			}

			
			private function onAddPictureClickHandler(event:MouseEvent):void {
				
				this.currentState = "newPictureSourceChooser";
			}
			
			private function onPhotoRollClickHandler(event:MouseEvent):void {
				
				var photoLibrarySelector:CameraRoll = new CameraRoll();
				var cameraRollOptions:CameraRollBrowseOptions = new CameraRollBrowseOptions();
				cameraRollOptions.width = this.stage.stageWidth / 3;
				cameraRollOptions.height = this.stage.stageHeight/3;
				cameraRollOptions.origin = new Rectangle(event.target.x+10, event.target.y, event.target.width, event.target.height);
				
				photoLibrarySelector.browseForImage(cameraRollOptions);
				photoLibrarySelector.addEventListener(MediaEvent.SELECT, onPhotoSelected);
			}
			
			private function onTakePhotoClickHandler(event:MouseEvent):void {
				
				var camera:CameraUI = new CameraUI();
				camera.addEventListener(MediaEvent.COMPLETE, onPhotoSelected);
				camera.launch(MediaType.IMAGE);
			}
			
			private function onPhotoSelected(event:MediaEvent):void {
				
				var promise:MediaPromise = event.data;
				var loaderContext:LoaderContext = new LoaderContext();
				loaderContext.imageDecodingPolicy = ImageDecodingPolicy.ON_LOAD;
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onImageLoaded);
				loader.loadFilePromise(promise, loaderContext);
				event.currentTarget.removeEventListener(MediaEvent.SELECT, onPhotoSelected);
			}
			
			private function onPhotoTaken(event:MediaEvent):void {
				
				var promise:MediaPromise = event.data;
				var loader:Loader = new Loader();
				var loaderContext:LoaderContext = new LoaderContext();
				loaderContext.imageDecodingPolicy = ImageDecodingPolicy.ON_LOAD;
				
				//loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onImageLoaded);
				//loader.loadFilePromise(promise, loaderContext);
				//event.currentTarget.removeEventListener(MediaEvent.SELECT, onPhotoTaken);
			}
			
			private function onImageLoaded(event:Event):void {
				
				pictureBitmap = event.currentTarget.content.bitmapData;
				image.x = -pictureBitmap.width/2;
				image.y = -pictureBitmap.height/2;
				trace("width: ", pictureBitmap.width);
				
				imageContainer.alpha = 1;
				
				imageContainer.x = Screen.mainScreen.bounds.width/2;
				imageContainer.y = Screen.mainScreen.bounds.height/2;
				imageContainer.scaleX = 1;
				imageContainer.scaleY = 1;
				if(this.imageContainer.numChildren>0) {
					
					var a:int = 0;
					var b:int = this.imageContainer.numChildren;
					for(;a<b;a++) {
						
						this.imageContainer.removeChildAt(a)
					}
				}
				
				/* var whiteBackground:WhiteBackground = new WhiteBackground();
				whiteBackground.width = image.width;
				whiteBackground.height = image.height;
				whiteBackground.x = -(whiteBackground.width/2)
					whiteBackground.y = -(whiteBackground.height/2); */
				/* this.imageContainer.addChild(whiteBackground);
				this.addChild(imageContainer); */
				//imageContainer.addElement(image);
				//Tweener.addTween(this.imageContainer, {alpha:1, time:.5, transition:"easeOutQuad"});
				
				event.currentTarget.removeEventListener(Event.COMPLETE, onImageLoaded);
				this.currentState = "editPictureEditing";
				scaleInitialImage();
				this.currentState = "scalePictureInstructions";
				
				Multitouch.inputMode = MultitouchInputMode.GESTURE;
				this.imageContainer.addEventListener(TransformGestureEvent.GESTURE_ZOOM, onZoom);
				this.imageContainer.addEventListener(TransformGestureEvent.GESTURE_PAN, onPan);
			}
			
			private function onZoom(event:TransformGestureEvent):void {
				
				this.currentState = "scalingPicture";
				
				originalScaleX *= (event.scaleX);
				
				imageContainer.scaleX = originalScaleX;
				imageContainer.scaleY = imageContainer.scaleX;
			}
			
			private function onPan(event:TransformGestureEvent):void{
				
				this.currentState = "scalingPicture";
				
				imageContainer.x += event.offsetX;
				imageContainer.y += event.offsetY;
			}
			
			private function onDoneEditingClickHandler(event:MouseEvent):void {
				
				this.currentState = "editPictureClosed";
				
				Tweener.addTween(this.pictureMask, {y:279, time:.5, transition:"easeOutQuad"});
				Tweener.addTween(this.pictureMask, {height:477, time:.5, transition:"easeOutQuad"});
			}
			
			private function scaleInitialImage():void {
				
				//minScaleX = 200/imageContainer.width;
				
				if(imageContainer.width>Screen.mainScreen.bounds.width || imageContainer.height>Screen.mainScreen.bounds.height) {
					
					if(imageContainer.width>imageContainer.height) {
						
						imageContainer.scaleX = imageContainer.scaleY = Screen.mainScreen.bounds.width/imageContainer.width;
					} else {
						
						imageContainer.scaleY = imageContainer.scaleX = Screen.mainScreen.bounds.height/imageContainer.height;
					}
				}
				
				originalScaleX = imageContainer.scaleX;
			}
			
			private function onHideScalingInstructions(event:EffectEvent):void {
				this.scalingInstructions.visible = false;
			}

		]]>
	</fx:Script>
	
	<s:transitions>
		<s:Transition fromState="newPictureClosed" toState="newPictureSourceChooser" autoReverse="true">
			<s:Parallel>
				<s:Resize targets="{newBackground}" duration="500"/>
				<s:Fade targets="{addPictureLabel, getPictureFrom}" duration="500"/>
			</s:Parallel>
		</s:Transition>
		<s:Transition fromState="editPictureEditing" toState="scalePictureInstructions" autoReverse="true">
			<s:Fade target="{scalingInstructions}" duration="500"/>
		</s:Transition>
		<s:Transition fromState="scalePictureInstructions" toState="scalingPicture" autoReverse="true">
			<s:Fade target="{scalingInstructions}" duration="500" effectEnd="onHideScalingInstructions(event)"/>
		</s:Transition>
		<s:Transition fromState="scalingPicture" toState="editPictureClosed" autoReverse="true">
			<s:Fade target="{saveButton" duration="500"/>
		</s:Transition>
	</s:transitions>
	<s:states>
		<s:State name="newPictureClosed"/>
		<s:State name="newPictureSourceChooser"/>
		<s:State name="editPictureClosed"/>
		<s:State name="scalePictureInstructions"/>
		<s:State name="scalingPicture"/>
		<s:State name="editPictureEditing"/>
	</s:states>
	
	<s:Group id="newBackground"  includeIn="newPictureClosed, newPictureSourceChooser, editPictureEditing"  click="onAddPictureClickHandler(event)">
		<s:Rect width="768" height.newPictureClosed="473" height.newPictureSourceChooser="1024" height.editPictureEditing="1024">
			<s:fill>
				<s:SolidColor color="#242323"/>
			</s:fill>
		</s:Rect>
		<s:Label id="addPictureLabel" horizontalCenter="0" text="Add a picture" y.newPictureClosed="222" y.newPictureSourceChooser="497"  alpha.newPictureClosed="1" alpha.newPictureSourceChooser="0"  styleName="AddProfileLabel"/>
		<s:Group id="getPictureFrom" horizontalCenter="0" y.newPictureClosed="222" y.newPictureSourceChooser="497" alpha.newPictureClosed="0" alpha.newPictureSourceChooser="1"  visible.newPictureClosed="false" >
			<s:layout>
				<s:VerticalLayout gap="10"/>
			</s:layout>
			<s:Label horizontalCenter="0" text="Where do you want to get the picture from?" styleName="QuestionLabel"/>
			<s:Group horizontalCenter="0">
				<s:layout>
					<s:HorizontalLayout gap="10"/>
				</s:layout>
				<uicomponents:PhotoRollButton click="onPhotoRollClickHandler(event)"/>
				<uicomponents:TakePhotoButton click="onTakePhotoClickHandler(event)"/>
			</s:Group>
		</s:Group>
	</s:Group>
	<s:Group includeIn="editPictureClosed, editPictureEditing, newPictureSourceChooser, scalePictureInstructions, scalingPicture">
		<s:Group id="imageContainer">
			<s:BitmapImage id="image" source="{pictureBitmap}"/>
		</s:Group>
	</s:Group>
	<s:BitmapImage id="scalingInstructions" x="213" y="422" alpha.editPictureEditing="0" alpha.scalePictureInstructions="1" alpha.scalingPicture="0" includeIn="editPictureEditing, scalePictureInstructions, scalingPicture" source="{scalingInstrucitonsBitmap}"/>
	<s:Group id="saveButton" x="690" y="985" alpha.editPictureEditing="0" alpha.scalePictureInstructions="1" alpha.scalingPicture="1" alpha.editPictureClosed="0" includeIn="editPictureEditing, scalePictureInstructions, scalingPicture" click="onDoneEditingClickHandler(event)">
		<s:BitmapImage  source="{saveButtonBitmap}"/>
	</s:Group>
</s:Group>
